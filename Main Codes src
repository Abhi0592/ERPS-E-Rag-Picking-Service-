//Data Fetch Activity//

package com.example.java.ewms;

import android.graphics.Color;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.json.JSONTokener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.ArrayList;

import static android.webkit.ConsoleMessage.MessageLevel.LOG;

public class Main2Activity extends AppCompatActivity {

    private static final String TAG = "UsingThingspeakAPI";
    private static final String THINGSPEAK_CHANNEL_ID = "765164";
    private static final String THINGSPEAK_API_KEY = "443DBA1XK3HULNWM"; //GARBAGE KEY
    private static final String THINGSPEAK_API_KEY_STRING = "443DBA1XK3HULNWM";
    /* Be sure to use the correct fields for your own app*/
    private static final String THINGSPEAK_FIELD1 = "field1";
    private static final String THINGSPEAK_FIELD2 = "field2";
    private static final String THINGSPEAK_UPDATE_URL = "https://api.thingspeak.com/update?";
    private static final String THINGSPEAK_CHANNEL_URL = "https://api.thingspeak.com/channels/";
    private static final String THINGSPEAK_FEEDS_LAST = "/feeds/last?";
    TextView timeText,valueText;
    Button b1;
    String data="",singlepars ="",singlepars1="";
    String timeData,valueData;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main2);
        timeText=(TextView)findViewById(R.id.timee);
        valueText=(TextView)findViewById(R.id.valuee);


        new FetchThingspeakTask().execute();
    }
    class FetchThingspeakTask extends AsyncTask<Void, Void, String> {
//        protected void onPreExecute() {
//            t2.setText("Fetching Data from Server.Please Wait...");
//        }
        protected String doInBackground(Void... urls) {
            try {
                URL url = new URL(THINGSPEAK_CHANNEL_URL + THINGSPEAK_CHANNEL_ID +
                        THINGSPEAK_FEEDS_LAST + THINGSPEAK_API_KEY_STRING + "=" +
                        THINGSPEAK_API_KEY + "");
                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
                try {
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                    StringBuilder stringBuilder = new StringBuilder();
                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        data = data+line;


                    }
                    bufferedReader.close();
                    //data = stringBuilder.toString();
                   // singlepars = data.substring(38);
                    JSONObject  json = new JSONObject(data);
                    timeData = json.getString("created_at");
                    valueData = json.getString("field1");
//                    singlepars ="Date: "+ json.getString("created_at")+"\n"+"value: "+json.getString("field1");
                    Log.v("mahesh",singlepars+"kffkd");
                   // singlepars = data.substring(data.)
                    return stringBuilder.toString();


                }
                finally{
                    urlConnection.disconnect();
                }
            }
            catch(Exception e) {
                Log.e("ERROR", e.getMessage(), e);
                return null;
            }
        }
        protected void onPostExecute(String response) {
//            if(response == null) {
//                Toast.makeText(Main2Activity.this, "There was an error", Toast.LENGTH_SHORT).show();
//                return;
//            }
//            try {
//                JSONObject channel = (JSONObject) new JSONTokener(response).nextValue();
//                double v1 = channel.getDouble(THINGSPEAK_FIELD1);
//                if(v1>=90)
//                    t1.setText("HI ALL  ");
//                else
//                    t1.setText("NO VALUES");
//            } catch (JSONException e) {
//                e.printStackTrace();
//            }
            if(data == null)
            { Toast.makeText(Main2Activity.this,"no data available",Toast.LENGTH_SHORT).show();
            return;}

            timeText.setText(timeData);
            if(Integer.parseInt(valueData)<=30)
                valueText.setTextColor(Color.parseColor("#2e7d32"));
            else
                if(Integer.parseInt(valueData)>30 && Integer.parseInt(valueData)<=60)
                    valueText.setTextColor(Color.parseColor("#ffab00"));
                 else
                     valueText.setTextColor(Color.parseColor("#d50000"));
            valueText.setText(valueData);
        }
    }
}



// Main Front Activity//

package com.example.java.ewms;

import android.Manifest;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.LocationManager;
import android.os.Handler;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;

public class MainActivity extends AppCompatActivity {
    private EditText Name;
    private EditText Password;
    private TextView Info;
    private Button Login;
    private int LOCATION_REQUREST_CODE =1;
private int counter=5;
private TextView userRegistration;
private FirebaseAuth firebaseAuth;
    LocationManager lm;
private ProgressDialog progressDialog;
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        Name=(EditText)findViewById(R.id.etName);
        Password=(EditText)findViewById(R.id.etPassword);
        Info=(TextView)findViewById(R.id.tvInfo);
        Login=(Button)findViewById(R.id.btnLogin);
        userRegistration=(TextView)findViewById(R.id.tvRegister);

         lm = (LocationManager) getSystemService(LOCATION_SERVICE);


        if(ContextCompat.checkSelfPermission(MainActivity.this,
                Manifest.permission.ACCESS_FINE_LOCATION)==PackageManager.PERMISSION_GRANTED){
            Toast.makeText(MainActivity.this,"you have already granted the location access permission",Toast.LENGTH_LONG).show();
            boolean enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
            if(!enabled) {
                showDialogGPS();
            }
            }
            else{
            requestLocationPermission();

        }

        Info.setText("No of attempts remaining:5");
        firebaseAuth=FirebaseAuth.getInstance() ;
        progressDialog=new ProgressDialog(this);
        FirebaseUser user = firebaseAuth.getCurrentUser();
        if(user!=null){
            finish();
            startActivity(new Intent(MainActivity.this,Maps1Activity.class));
        }
        Login.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                if(Name.getText().toString().equals(null) || Password.getText().toString().equals(null)){
                    Toast.makeText(MainActivity.this, "field can't be empty", Toast.LENGTH_SHORT).show();
                    return;}
                validate(Name.getText().toString(),Password.getText().toString());

            }
        });
        userRegistration.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity (new Intent (MainActivity.this,RegistrationActivity.class));
            }
        });

    }
    private void validate(String userName, String userPassword){
        progressDialog.setMessage("Please Wait for a Moment");
        progressDialog.show();

        firebaseAuth.signInWithEmailAndPassword(userName,userPassword).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
            @Override
            public void onComplete(@NonNull Task<AuthResult> task) {
           if(task.isSuccessful()){
               progressDialog.dismiss();
               Toast.makeText(MainActivity.this, "Login Successful", Toast.LENGTH_SHORT).show();
               startActivity(new Intent(MainActivity.this,Maps1Activity.class));

           }else{
               Toast.makeText(MainActivity.this, "Login Failed", Toast.LENGTH_SHORT).show();
               counter--;
               Info.setText("No of attempts remaining:"+ counter);
               progressDialog.dismiss();
               if(counter==0){
                   Login.setEnabled(false);
               }
           }
            }
        });
    }
    private void showDialogGPS() {
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setCancelable(false);
        builder.setTitle("Enable GPS");
        builder.setMessage("Please enable GPS");
        builder.setInverseBackgroundForced(true);
        builder.setPositiveButton("Enable", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                startActivity(
                        new Intent(android.provider.Settings.ACTION_LOCATION_SOURCE_SETTINGS));
                Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    public void run() {
                       enableGps();
                    }
                }, 5000);

            }
        });
        builder.setNegativeButton("Ignore", new DialogInterface.OnClickListener() {
            public void onClick(DialogInterface dialog, int which) {
                boolean enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
                if(!enabled) {
                    showDialogGPS();
                }
            }
        });

        AlertDialog alert = builder.create();
        alert.show();

    }

    public void requestLocationPermission(){
        if(ActivityCompat.shouldShowRequestPermissionRationale(this,Manifest.permission.ACCESS_FINE_LOCATION)){
            ActivityCompat.requestPermissions(MainActivity.this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},LOCATION_REQUREST_CODE);
            }
            else
                ActivityCompat.requestPermissions(this,new String[]{Manifest.permission.ACCESS_FINE_LOCATION},LOCATION_REQUREST_CODE);
    }


    @Override
    public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults) {

        if (requestCode == LOCATION_REQUREST_CODE) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Toast.makeText(this, "permission granted", Toast.LENGTH_LONG).show();
                boolean enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
                if(!enabled) {
                    showDialogGPS();
                }
            } else{
                Toast.makeText(this, "location access is necessary", Toast.LENGTH_LONG).show();
                Handler handler = new Handler();
                handler.postDelayed(new Runnable() {
                    public void run() {
                        requestLocationPermission();
                    }
                }, 3000);

            }
        }
    }


    public void enableGps(){
        boolean enabled = lm.isProviderEnabled(LocationManager.GPS_PROVIDER);
        if(!enabled) {
            showDialogGPS();
        }
    }

}



//Map Activity//

package com.example.java.ewms;

import android.Manifest;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.graphics.Color;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.os.Handler;
import android.support.v4.app.ActivityCompat;
import android.support.v4.app.FragmentActivity;
import android.os.Bundle;
import android.support.v4.app.FragmentTransaction;
import android.support.v7.app.ActionBar;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.widget.Button;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.location.FusedLocationProviderClient;
import com.google.android.gms.location.LocationServices;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.BitmapDescriptor;
import com.google.android.gms.maps.model.BitmapDescriptorFactory;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.firebase.auth.FirebaseAuth;

import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

import static android.Manifest.permission.ACCESS_FINE_LOCATION;

public class Maps1Activity extends AppCompatActivity implements OnMapReadyCallback {


    private GoogleMap mMap;
    private FirebaseAuth firebaseAuth;
    private FusedLocationProviderClient client;
    private double lattitude;
    private double longitude;
    Marker mymarker;

  //  fetch data from json
    private static final String TAG = "UsingThingspeakAPI";
    private static final String THINGSPEAK_CHANNEL_ID = "765164";
    private static final String THINGSPEAK_API_KEY = "443DBA1XK3HULNWM"; //GARBAGE KEY
    private static final String THINGSPEAK_API_KEY_STRING = "443DBA1XK3HULNWM";
    /* Be sure to use the correct fields for your own app*/
    private static final String THINGSPEAK_FIELD1 = "field1";
    private static final String THINGSPEAK_FIELD2 = "field2";
    private static final String THINGSPEAK_UPDATE_URL = "https://api.thingspeak.com/update?";
    private static final String THINGSPEAK_CHANNEL_URL = "https://api.thingspeak.com/channels/";
    private static final String THINGSPEAK_FEEDS_LAST = "/feeds/last?";
    TextView timeText,valueText;
    Button b1;
    String data="",singlepars ="",singlepars1="";
    String timeData,valueData;
    //.................//

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_maps1);
        firebaseAuth = FirebaseAuth.getInstance();

        //if no internet connection
        NetworkInfo info = (NetworkInfo) ((ConnectivityManager)
                this.getSystemService(Context.CONNECTIVITY_SERVICE)).getActiveNetworkInfo();
        if(info == null)
        {
            Toast.makeText(this,"no internet connection",Toast.LENGTH_LONG).show();
            finish();
            // System.exit(0);
        }

        // Obtain the SupportMapFragment and get notified when the map is ready to be used.
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);

         while(mapFragment == null){
             mapFragment.getMapAsync(this);

         }


//json
        new FetchThingspeakTask().execute();



        LocationManager lm = (LocationManager) getSystemService(LOCATION_SERVICE);
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED && ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            return;
        }
        Location location = lm.getLastKnownLocation(LocationManager.GPS_PROVIDER);
        Log.d("checkerror",lattitude+" ");
        final LocationListener locationListener=new LocationListener() {
            @Override
            public void onLocationChanged(Location location) {
                lattitude=location.getLatitude();
                longitude=location.getLongitude();
                Log.d("checkerror",lattitude+" ");
            }

            @Override
            public void onStatusChanged(String provider, int status, Bundle extras) {

            }

            @Override
            public void onProviderEnabled(String provider) {

            }

            @Override
            public void onProviderDisabled(String provider) {

            }
        };
        while (lattitude==0.0) {
            lm.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0,0, locationListener);
            lattitude = location.getLatitude();
            longitude = location.getLongitude();
        }

    }

    private void Logout() {
        firebaseAuth.signOut();
        finish();
        startActivity(new Intent(Maps1Activity.this, MainActivity.class));
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.menu,menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch(item.getItemId()){
            case R.id.logoutMenu:{
                Logout();
            }
        }
        return super.onOptionsItemSelected(item);
    }



    /**
     * Manipulates the map once available.
     * This callback is triggered when the map is ready to be used.
     * This is where we can add markers or lines, add listeners or move the camera. In this case,
     * we just add a marker near Sydney, Australia.
     * If Google Play services is not installed on the device, the user will be prompted to install
     * it inside the SupportMapFragment. This method will only be triggered once the user has
     * installed Google Play services and returned to the app.
     */
    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;
        // Add a marker in Sydney and move the camera
        LatLng mylocation = new LatLng(lattitude, longitude);
        Log.v("gunjan", Double.toString(lattitude));

        mMap.addMarker(new MarkerOptions().position(mylocation).title("My location"));
        mMap.moveCamera(CameraUpdateFactory.newLatLngZoom(mylocation,15));


//     if(valueData!= null)
//     mymarker =    mMap.addMarker(new MarkerOptions().position(new LatLng(30.218610,75.696959)).title("Dumping yard").icon(BitmapDescriptorFactory.fromResource(R.drawable.images2)));

        mMap.setOnMarkerClickListener(new GoogleMap.OnMarkerClickListener() {
          @Override
          public boolean onMarkerClick(Marker marker) {
              if(mymarker.equals(marker))
                  startActivity(new Intent(Maps1Activity.this, Main2Activity.class));
              return false;
          }
      });


    }

    class FetchThingspeakTask extends AsyncTask<Void, Void, String> {
        //        protected void onPreExecute() {
//            t2.setText("Fetching Data from Server.Please Wait...");
//        }
        protected String doInBackground(Void... urls) {
            try {
                URL url = new URL(THINGSPEAK_CHANNEL_URL + THINGSPEAK_CHANNEL_ID +
                        THINGSPEAK_FEEDS_LAST + THINGSPEAK_API_KEY_STRING + "=" +
                        THINGSPEAK_API_KEY + "");
                HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
                try {
                    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(urlConnection.getInputStream()));
                    StringBuilder stringBuilder = new StringBuilder();
                    String line;
                    while ((line = bufferedReader.readLine()) != null) {
                        data = data+line;


                    }
                    bufferedReader.close();
                    //data = stringBuilder.toString();
                    // singlepars = data.substring(38);
                    JSONObject json = new JSONObject(data);
                    timeData = json.getString("created_at");
                    valueData = json.getString("field1");
//                    singlepars ="Date: "+ json.getString("created_at")+"\n"+"value: "+json.getString("field1");
                    Log.v("mahesh",singlepars+"kffkd");
                    // singlepars = data.substring(data.)
                    return stringBuilder.toString();


                }
                finally{
                    urlConnection.disconnect();
                }
            }
            catch(Exception e) {
                Log.e("ERROR", e.getMessage(), e);
                return null;
            }
        }
        protected void onPostExecute(String response) {
//            if(response == null) {
//                Toast.makeText(Main2Activity.this, "There was an error", Toast.LENGTH_SHORT).show();
//                return;
//            }
//            try {
//                JSONObject channel = (JSONObject) new JSONTokener(response).nextValue();
//                double v1 = channel.getDouble(THINGSPEAK_FIELD1);
//                if(v1>=90)
//                    t1.setText("HI ALL  ");
//                else
//                    t1.setText("NO VALUES");
//            } catch (JSONException e) {
//                e.printStackTrace();
//            }
//            if(data == null)
//            { Toast.makeText(Maps1Activity.this,"no data available",Toast.LENGTH_SHORT).show();
//                return;}
//
//            timeText.setText(timeData);
//            if(Integer.parseInt(valueData)<=30)
//                valueText.setTextColor(Color.parseColor("#2e7d32"));
//            else
//            if(Integer.parseInt(valueData)>30 && Integer.parseInt(valueData)<=60)
//                valueText.setTextColor(Color.parseColor("#ffab00"));
//            else
//                valueText.setTextColor(Color.parseColor("#d50000"));
//            valueText.setText(valueData);

            if(Integer.parseInt(valueData)<=30)
                mymarker =  mMap.addMarker(new MarkerOptions().position(new LatLng(30.218610,75.696959)).title("Dumping yard").icon(BitmapDescriptorFactory.fromResource(R.drawable.sssss)));
            else
                if(Integer.parseInt(valueData)>30 && Integer.parseInt(valueData)<=60)
                    mymarker =    mMap.addMarker(new MarkerOptions().position(new LatLng(30.218610,75.696959)).title("Dumping yard").icon(BitmapDescriptorFactory.fromResource(R.drawable.yellow1)));
                else
                    mymarker =    mMap.addMarker(new MarkerOptions().position(new LatLng(30.218610,75.696959)).title("Dumping yard").icon(BitmapDescriptorFactory.fromResource(R.drawable.red)));

        }
    }

}



//Registration Activity//

package com.example.java.ewms;

import android.content.Intent;
import android.support.annotation.NonNull;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.AuthResult;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.auth.FirebaseUser;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

public class RegistrationActivity extends AppCompatActivity {
    private EditText userName, userPassword, userEmail;
    private Button regButton;
    private TextView userLogin;
    private FirebaseAuth firebaseAuth;
    private EditText userPhone;
    private DatabaseReference saveData = FirebaseDatabase.getInstance().getReference().child("users");


    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_registration);

        userName= (EditText)findViewById(R.id.etUserName);
        userPassword= (EditText)findViewById(R.id.etUserPassword);
        userEmail= (EditText)findViewById(R.id.etUserEmail);
        regButton= (Button)findViewById(R.id.btnRegister);
        userLogin= (TextView)findViewById(R.id.tvUserLogin);
        userPhone = (EditText) findViewById(R.id.etUserPhone);

                firebaseAuth=FirebaseAuth.getInstance() ;
        regButton.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (validate()) {
                    // Upload the Data to the DataBase
                    String user_email=userEmail.getText().toString().trim();
                    String user_password =userPassword.getText().toString().trim();
                    firebaseAuth.createUserWithEmailAndPassword(user_email,user_password).addOnCompleteListener(new OnCompleteListener<AuthResult>() {
                        @Override
                        public void onComplete(@NonNull Task<AuthResult> task) {
                            if(task.isSuccessful()){
                                Toast.makeText(RegistrationActivity.this,"Registration Successfull",Toast.LENGTH_SHORT).show();
                                //save data to database
                                saveData();

                                startActivity(new Intent(RegistrationActivity.this,MainActivity.class));
                                }else {
                                Toast.makeText(RegistrationActivity.this,"Registration failed",Toast.LENGTH_SHORT).show();
                            }

                        }
                    });
                }
            }
        });
        userLogin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                startActivity(new Intent(RegistrationActivity.this,MainActivity.class));
            }
        });
    }

    private Boolean validate(){
        Boolean result=false;
        String name=userName.getText().toString();
        String password=userPassword.getText().toString();
        String email=userEmail.getText().toString();
        String phone=userPhone.getText().toString();

        if(name.isEmpty() ||password.isEmpty() || email.isEmpty()){
            Toast.makeText(this,"please enter all the Details",Toast.LENGTH_SHORT).show();

        }else{
            result=true;

        }
        return result;
    }
    private void saveData(){
        String name=userName.getText().toString();
        String password=userPassword.getText().toString();
        String email=userEmail.getText().toString();
        String phone=userPhone.getText().toString();
        String newEmail=email.replace(".",",");
        DatabaseReference saveUserData = saveData.child(newEmail);
        saveUserData.child("Name").setValue(name);
        saveUserData.child("Email").setValue(email);
        saveUserData.child("Password").setValue(password);
        saveUserData.child("Phone No").setValue(phone);




    }
}



//Splash screen//

package com.example.java.ewms;

import android.content.Intent;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.view.Window;
import android.view.WindowManager;

public class SplashActivity extends AppCompatActivity {
    private int SLEEP_TIMER=3;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);


        requestWindowFeature(Window.FEATURE_NO_TITLE);
        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN, WindowManager.LayoutParams.FLAG_FULLSCREEN);
        setContentView(R.layout.activity_splash);
       // getSupportActionBar().hide();
        LogoLauncher logoLauncher=new LogoLauncher();
        logoLauncher.start();
    }

        private class LogoLauncher extends Thread{
            public void run (){
                try {
                    sleep(1000*SLEEP_TIMER);
                }catch (InterruptedException e){
                    e.printStackTrace();
                }
                Intent intent = new Intent(SplashActivity.this,MainActivity.class);
                startActivity(intent);
                SplashActivity.this.finish();

            }
        }



    }

